<?php

/**
 * Company: ToXSL Technologies Pvt. Ltd. < www.toxsl.com >
 * Author : Shiv Charan Panjeta < shiv@toxsl.com >
 */

/**
 * This is the model base class for the table "{{order}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Order".
 *
 * Columns in table "{{order}}" available as properties of the model,
 * followed by relations of table "{{order}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $create_user_id
 * @property integer $ship_address_id
 * @property integer $bil_address_id
 * @property string $amount
 * @property string $order_email
 * @property string $phone_no
 * @property integer $paid
 * @property integer $payment_id
 * @property integer $type_id
 * @property integer $state_id
 * @property string $ship_time
 * @property string $create_time
 * @property string $update_time
 *
 * @property UserAddress $bilAddress
 * @property User $createUser
 * @property UserAddress $shipAddress
 * @property OrderItem[] $orderItems
 */
abstract class BaseOrder extends ActiveRecord {
	const CASH_ON_DELIVERY = 0;
	const PAY_NOW = 1;
	const STATE_UNPAID = 2;
	const STATE_PAID = 3;
	const STATE_PROCESS = 4;
	const STATE_COMPLETED = 5;
	const STATE_DELETED = 6;
	const STATE_ACCEPT = 7;
	const STATE_REJECT = 8;
	const STATE_DELIVERED = 9;
	const STATE_ON = 10;
	const STATE_SHIPPED = 11;
	
	const STATE_PENDING = 12;
	
	const UNPAID =0;
	const PAID = 1;
	
	public  $address;
	
	public static function getPaidOptions($id = null) {
		$list = array (
			
				self::PAID=> "Payment Done",
				self::UNPAID=> "Un paid",
				
		);
		if ($id == null)
			return $list;
			if (is_numeric ( $id ))
				return $list [$id];
				return $id;
	}
	public static function getTypeOptions($id = null) {
		$list = array (
				self::CASH_ON_DELIVERY=> Yii::t('app','cash on delivery'),
				self::PAY_NOW=>  Yii::t('app','pay now'),
				self::STATE_UNPAID => Yii::t('app','unpaid'),
				self::STATE_PAID => Yii::t('app','paid'),
				self::STATE_PROCESS => Yii::t('app','process'),
				self::STATE_COMPLETED =>  Yii::t('app','completed'),
				self::STATE_DELETED => "Deleted",
				self::STATE_ACCEPT =>  Yii::t('app','accepted'),
				self::STATE_REJECT => Yii::t('app','reject'),
				self::STATE_DELIVERED=> Yii::t('app','delivered'),
				self::STATE_ON=>  Yii::t('app','on the way'),
				self::STATE_SHIPPED=>  Yii::t('app','shipped'),
				self::STATE_PENDING=>  Yii::t('app','pending'),
				
		);
		if ($id == null)
			return $list;
			if (is_numeric ( $id ))
				return $list [$id];
				return $id;
	}
	public static function getStatusOptions($id = null) {
		$list = array (
				self::CASH_ON_DELIVERY=> Yii::t('app','cash on delivery'),
				self::PAY_NOW=>  Yii::t('app','pay now'),
				self::STATE_UNPAID => Yii::t('app','unpaid'),
				self::STATE_PAID => Yii::t('app','paid'),
				self::STATE_PROCESS => Yii::t('app','process'),
				self::STATE_COMPLETED =>  Yii::t('app','completed'),
				self::STATE_DELETED => "Deleted",
				self::STATE_ACCEPT =>  Yii::t('app','accepted'),
				self::STATE_REJECT => Yii::t('app','reject'),
				self::STATE_DELIVERED=> Yii::t('app','delivered'),
				self::STATE_ON=>  Yii::t('app','on the way'),
				self::STATE_SHIPPED=>  Yii::t('app','shipped'),
				self::STATE_PENDING=>  Yii::t('app','pending'),
		);
		if ($id == null)
			return $list;
			if (is_numeric ( $id ))
				return $list [$id];
				return $id;
	}
	
	public function beforeValidate() {
		if ($this->isNewRecord) {
			if (! isset ( $this->create_user_id ))
				$this->create_user_id = Yii::app ()->user->id;
				if (! isset ( $this->create_time ))
					$this->create_time = new CDbExpression ( 'NOW()' );
		} else {
		}
		return parent::beforeValidate ();
	}
	public static function model($className = __CLASS__) {
		return parent::model ( $className );
	}
	public function tableName() {
		return '{{order}}';
	}
	public static function label($n = 1) {
		return Yii::t ( 'app', 'Order|Orders', $n );
	}
	public static function representingColumn() {
		return 'ship_time';
	}
	
	protected function beforeDelete()
	{
		
		OrderItem::model()->deleteAllByAttributes(array('order_id'=>$this->id));
		
		return parent::beforeDelete();
		
	}
	
	
	
	public function rules() {
		return array (
				array (
						'create_user_id,ship_address_id,bil_address_id, create_time',
						'required'
				),
				array (
						'create_user_id, ship_address_id, bil_address_id, paid, payment_id, type_id, state_id',
						'numerical',
						'integerOnly' => true
				),
				array (
						'amount',
						'length',
						'max' => 32
				),
				array (
						'order_email',
						'length',
						'max' => 256
				),
				array (
						'phone_no',
						'length',
						'max' => 1024
				),
				array (
						'amount, order_email, phone_no, paid, payment_id, type_id, state_id',
						'default',
						'setOnEmpty' => true,
						'value' => null
				),
				
				array (
						'builing_name',
						'safe'),
				
				
				array (
						'id, create_user_id, ship_address_id, bil_address_id, amount, order_email, phone_no, paid, payment_id, type_id, state_id, ship_time, create_time, update_time',
						'safe',
						'on' => 'search'
				)
		);
	}
	public function relations() {
		return array (
				'bilAddress' => array (
						self::BELONGS_TO,
						'Address',
						'bil_address_id'
				),
				'createUser' => array (
						self::BELONGS_TO,
						'User',
						'create_user_id'
				),
				'shipAddress' => array (
						self::BELONGS_TO,
						'Address',
						'ship_address_id'
				),
				'orderItems' => array (
						self::HAS_MANY,
						'OrderItem',
						'order_id'
				),
				
				'shipAddressss' => array (
						self::HAS_ONE,
						'Address',
						'id'
				),
				
		);
	}
	public function pivotModels() {
		return array ();
	}
	public function attributeLabels() {
		return array (
				'id' => Yii::t ( 'app', 'ID' ),
				'create_user_id' => null,
				'ship_address_id' => null,
				'bil_address_id' => null,
				'amount' => Yii::t ( 'app', 'amount' ),
				'order_email' => Yii::t ( 'app', 'order email' ),
				'phone_no' => Yii::t ( 'app', 'phone no' ),
				'paid' => Yii::t ( 'app', 'paid' ),
				'payment_id' => Yii::t ( 'app', 'payment' ),
				'type_id' => Yii::t ( 'app', 'type' ),
				'state_id' => Yii::t ( 'app', 'state' ),
				'ship_time' => Yii::t ( 'app', 'ship time' ),
				'create_time' => Yii::t ( 'app', 'create time' ),
				'update_time' => Yii::t ( 'app', 'update time' ),
				
				'address' => Yii::t ( 'app', 'shipping address' ),
				
				
				'bilAddress' => null,
				'createUser' => null,
				'shipAddress' => null,
				'orderItems' => null
		);
	}
	public function search() {
		$criteria = new CDbCriteria ();
		
		$criteria->compare ( 'id', $this->id );
		$criteria->compare ( 'create_user_id', $this->create_user_id );
		$criteria->compare ( 'ship_address_id', $this->ship_address_id );
		$criteria->compare ( 'bil_address_id', $this->bil_address_id );
		$criteria->compare ( 'amount', $this->amount, true );
		$criteria->compare ( 'order_email', $this->order_email, true );
		$criteria->compare ( 'phone_no', $this->phone_no, true );
		$criteria->compare ( 'paid', $this->paid );
		$criteria->compare ( 'payment_id', $this->payment_id );
		$criteria->compare ( 'type_id', $this->type_id );
		$criteria->compare ( 'state_id', $this->state_id );
		$criteria->compare ( 'ship_time', $this->ship_time, true );
		$criteria->compare ( 'create_time', $this->create_time, true );
		$criteria->compare ( 'update_time', $this->update_time, true );
		
		return new CActiveDataProvider ( $this, array (
				'criteria' => $criteria,
				'pagination'=>array(
						'pagesize'=>20,
				)
		) );
	}
}