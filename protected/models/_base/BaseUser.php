<?php

/**
 * Company: ToXSL Technologies Pvt. Ltd. < www.toxsl.com >
 * Author : Shiv Charan Panjeta < shiv@toxsl.com >
 */

/**
 * This is the model base class for the table "{{user}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "{{user}}" available as properties of the model,
 * followed by relations of table "{{user}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $username
 * @property string $first_name
 * @property string $middle_name
 * @property string $last_name
 * @property string $date_of_birth
 * @property string $password
 * @property integer $gender
 * @property string $about_me
 * @property string $image_file
 * @property integer $tos
 * @property integer $role_id
 * @property integer $state_id
 * @property integer $type_id
 * @property string $last_visit_time
 * @property string $last_action_time
 * @property string $last_password_change
 * @property string $activation_key
 * @property integer $login_error_count
 * @property string $create_time
 *
 * @property Company[] $companies
 * @property UserRole $role
 * @property UserAddress[] $userAddresses
 */
abstract class BaseUser extends ActiveRecord {
	const STATUS_INACTIVE = 0;
	const STATUS_ACTIVE = 1;
	const STATUS_BANNED = - 1;
	const STATUS_REMOVED = - 2;
	const EMAIL_DISABLE = 0;
	const EMAIL_ENABLE = 1;
	public $password_2 = null;
	public $skill_list = null;
	public $score = null;
	const ROLE_USER = 3;
	const ROLE_BUSINESS_USER = 2;
	const ROLE_ADMIN = 1;
	public $verifyCode = null;
	private static $password_expiration_day = 90;
	protected static $salt1 = "rome";
	protected static $hashFunc = 'md5';
	public $hello;
	public static function getEmailNotification($id = null) {
		$list = array (
				self::EMAIL_ENABLE => 'Yes',
				self::EMAIL_DISABLE => 'No' 
		
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public static function getRoleOptions($id = null) {
		$criteria = new CDbCriteria ();
		if (! Yii::app ()->user->isAdmin) {
			$criteria->addNotInCondition ( 'id', array (
					User::ROLE_ADMIN 
			) );
		}
		$models = UserRole::model ()->findAll ( $criteria );
		
		$list = CHtml::listData ( $models, 'id', 'title' );
		
		return $list;
	}
	public static function getGender($id = null) {
		$list = array (
				'Mr',
				'Mrs',
				'Miss',
				'Dr' 
		);
		
		if ($id === null)
			return $list;
		return $list [$id % count ( $list )];
	}
	public static function getStatusOptions($id = null) {
		$list = array (
				"InActive",
				"Active",
				"Banned",
				"Removed" 
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public static function getTypeOptions($id = null) {
		$list = array (
				"TYPE1",
				"TYPE2",
				"TYPE3" 
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public function beforeValidate() {
		if ($this->isNewRecord) {
			if (! isset ( $this->create_time ))
				$this->create_time = new CDbExpression ( 'NOW()' );
			if (! isset ( $this->state_id ))
				$this->state_id = 1;
		} else {
		}
		return parent::beforeValidate ();
	}
	public static function model($className = __CLASS__) {
		return parent::model ( $className );
	}
	public function tableName() {
		return '{{user}}';
	}
	public static function label($n = 1) {
		return Yii::t ( 'app', 'user|users', $n );
	}
	public static function representingColumn() {
		return 'first_name';
	}
	public function rules() {
		return array (
				array (
						'first_name,last_name,ph_no,password, email',
						'required' 
				),
				array (
						'gender, tos, role_id, state_id, type_id,ph_no,login_error_count',
						'numerical',
						'integerOnly' => true 
				),
				array (
						'username',
						'length',
						'max' => 128 
				),
				array (
						'ph_no,hello',
						'length',
						'min' => 10,
						'max' => 16 
				),
				array (
						'email',
						'email' 
				),
				array (
						'email',
						'unique' 
				),
				
				array (
						'first_name',
						'match',
						'pattern' => '/^[a-z-]/i',
						'message' => 'Username can contain only [a-zA-Z].' 
				),
				array (
						'offer_and_deals',
						'safe' 
				),
				array (
						'first_name, middle_name, last_name',
						'length',
						'max' => 256 
				),
				array (
						'password, image_file, activation_key',
						'length',
						'max' => 512 
				),
				array (
						'password_2',
						'compare',
						'compareAttribute' => 'password',
						'message' => 'Password and Confirm Password does not match',
						'on' => 'create' 
				),
				array (
						'password, password_2',
						'length',
						'min' => 8,
						'max' => 40,
						'message' => 'Password must contain at least eight characters.',
						'on' => 'signup, recover,create'
				),
				array (
						'password',
						'match',
						'pattern' => '/\d/',
						'message' => 'Password must contain at least one numeric digit.',
						'on' => 'signup, recover,create'
				),
				array (
						'password',
						'match',
						'pattern' => '/\W/',
						'message' => 'Password must contain at least one special character.',
						'on' => 'signup, recover,create'
				),
				array (
						'ph_no',
						'match',
						'pattern' => '/^([+]?[0-9 ]+)$/',
						'on' => 'create' 
				),
				array (
						'first_name,last_name,gender',
						'required',
						'on' => 'usignup' 
				),
				array (
						'password, password_2',
						'required',
						'on' => 'edit' 
				),
				array (
						'password, password_2',
						'required',
						'on' => 'create' 
				),
				array (
						'password_2',
						'compare',
						'on' => 'edit',
						'compareAttribute' => 'password' 
				),
				array (
						'date_of_birth, about_me, last_visit_time, last_action_time, last_password_change, create_time, hello',
						'safe' 
				),
				array (
						'username, middle_name,ph_no,date_of_birth, gender, about_me, tos, role_id, state_id, type_id, last_visit_time, last_action_time, last_password_change, activation_key, login_error_count, create_time',
						'default',
						'setOnEmpty' => true,
						'value' => null 
				),
				
				array (
						'image_file',
						'file',
						'allowEmpty' => true,
						'types' => 'jpg,jpeg,gif,png' 
				),
				
				array (
						'id, username, first_name, middle_name, last_name,ph_no, date_of_birth, password,offer_and_deals, gender, about_me, image_file, tos, role_id, state_id, type_id, last_visit_time, last_action_time, last_password_change, activation_key, login_error_count, create_time, hello',
						'safe',
						'on' => 'search' 
				) 
		);
	}
	public function relations() {
		return array (
				'companies' => array (
						self::HAS_MANY,
						'Company',
						'create_user_id' 
				),
				'company' => array (
						self::HAS_ONE,
						'Company',
						'create_user_id' 
				),
				'myFeed' => array (
						self::HAS_ONE,
						'MyFeed',
						'create_user_id' 
				),
				'shop' => array (
						self::HAS_ONE,
						'Company',
						'create_user_id' 
				),
				'role' => array (
						self::BELONGS_TO,
						'UserRole',
						'role_id' 
				),
				
				'addresses' => array (
						self::HAS_ONE,
						'Address',
						'create_user_id' 
				), // this table is for billing and shipping address
				'userAddresses' => array (
						self::HAS_ONE,
						'UserAddress',
						'create_user_id' 
				), // this table is basically for business user company address
				'authSessions' => array (
						self::HAS_MANY,
						'AuthSession',
						'create_user_id' 
				),
				
				'postage' => array (
						self::HAS_MANY,
						'Postage',
						'create_user_id' 
				), // user have multiple postage options
				'postage_type1' => array (
						self::HAS_MANY,
						'Postage',
						'create_user_id',
						'condition' => 'type_id = 1' 
				), // user have multiple postage options with type 1 first item cost plus additional
				
				'Paypal' => array (
						self::HAS_MANY,
						'PaypalInfo',
						'create_user_id' 
				), // user have 2 paypal account
				
				'paymentSetting' => array (
						self::HAS_ONE,
						'PaymentSetting',
						'create_user_id' 
				), // user have 2 paypal account
				   
				// this is used in case of message
				'usermessage' => array (
						self::HAS_MANY,
						'UserMessage',
						'user_id',
						'group' => 'session_id' 
				),
				
				'adminUnreadmessage' => array (
						self::STAT,
						'UserMessage',
						'user_id',
						'condition' => 'state_id = 0' 
				) 
			// 'messages' => array(self::HAS_MANY, 'Message', 'from_user_id','group'=>'session_id'),
			
		// orders management
		);
	}
	public function pivotModels() {
		return array ();
	}
	public function attributeLabels() {
		return array (
				'id' => Yii::t ( 'app', 'ID' ),
				'email' => Yii::t ( 'app', 'email' ),
				'username' => Yii::t ( 'app', 'username' ),
				'first_name' => Yii::t ( 'app', 'first name' ),
				'middle_name' => Yii::t ( 'app', 'middle name' ),
				'last_name' => Yii::t ( 'app', 'last name' ),
				'ph_no' => Yii::t ( 'app', 'mobile number' ),
				'date_of_birth' => Yii::t ( 'app', 'date of birth' ),
				'password' => Yii::t ( 'app', 'password' ),
				'gender' => Yii::t ( 'app', 'gender' ),
				'about_me' => Yii::t ( 'app', 'about me' ),
				'image_file' => Yii::t ( 'app', 'image file' ),
				'tos' => Yii::t ( 'app', 'tos' ),
				'role_id' => Yii::t ( 'app', 'sign up as' ),
				'state_id' => Yii::t ( 'app', 'state' ),
				'type_id' => Yii::t ( 'app', 'type' ),
				'last_visit_time' => Yii::t ( 'app', 'last visit time' ),
				'last_action_time' => Yii::t ( 'app', 'last action time' ),
				'last_password_change' => Yii::t ( 'app', 'last password change' ),
				'activation_key' => Yii::t ( 'app', 'activation key' ),
				'login_error_count' => Yii::t ( 'app', 'login error count' ),
				'create_time' => Yii::t ( 'app', 'create time' ),
				'password_2' => Yii::t ( 'app', 'confirm password' ),
				'companies' => null,
				'role' => null,
				'userAddresses' => null 
		);
	}
	public function search() {
		$criteria = new CDbCriteria ();
		$criteria->compare ( 'id', $this->id );
		$criteria->compare ( 'email', $this->email, true );
		$criteria->compare ( 'username', $this->username, true );
		$criteria->compare ( 'first_name', $this->first_name, true );
		$criteria->compare ( 'middle_name', $this->middle_name, true );
		$criteria->compare ( 'last_name', $this->last_name, true );
		$criteria->compare ( 'ph_no', $this->ph_no, true );
		$criteria->compare ( 'date_of_birth', $this->date_of_birth, true );
		$criteria->compare ( 'password', $this->password, true );
		$criteria->compare ( 'gender', $this->gender );
		$criteria->compare ( 'about_me', $this->about_me, true );
		$criteria->compare ( 'image_file', $this->image_file, true );
		$criteria->compare ( 'tos', $this->tos );
		$criteria->compare ( 'role_id', $this->role_id );
		$criteria->compare ( 'state_id', $this->state_id );
		$criteria->compare ( 'type_id', $this->type_id );
		$criteria->compare ( 'last_visit_time', $this->last_visit_time, true );
		$criteria->compare ( 'last_action_time', $this->last_action_time, true );
		$criteria->compare ( 'last_password_change', $this->last_password_change, true );
		$criteria->compare ( 'activation_key', $this->activation_key, true );
		$criteria->compare ( 'login_error_count', $this->login_error_count );
		$criteria->compare ( 'create_time', $this->create_time, true );
		
		return new CActiveDataProvider ( $this, array (
				'criteria' => $criteria 
		) );
	}
	/**
	 * This is used in admin panel to find users on the basis of roles.
	 * Enter description here ...
	 */
	public function searchDiffUser($role_id) {
		$criteria = new CDbCriteria ();
		$criteria->compare ( 'id', $this->id );
		$company_userlist = array ();
		$criteria->addCondition ( 'role_id =' . $role_id );
		if ($role_id == 2) {
			
			$companys = Company::model ()->findAll ();
			$company_userlist = array ();
			foreach ( $companys as $company ) {
				$company_userlist [] = $company->create_user_id;
			}
			$criteria->addInCondition ( 'id', $company_userlist );
		}
		$criteria->compare ( 'email', $this->email, true );
		$criteria->compare ( 'username', $this->username, true );
		$criteria->compare ( 'first_name', $this->first_name, true );
		$criteria->compare ( 'middle_name', $this->middle_name, true );
		$criteria->compare ( 'last_name', $this->last_name, true );
		$criteria->compare ( 'date_of_birth', $this->date_of_birth, true );
		$criteria->compare ( 'password', $this->password, true );
		$criteria->compare ( 'gender', $this->gender );
		$criteria->compare ( 'about_me', $this->about_me, true );
		$criteria->compare ( 'image_file', $this->image_file, true );
		$criteria->compare ( 'tos', $this->tos );
		$criteria->compare ( 'role_id', $this->role_id );
		$criteria->compare ( 'state_id', $this->state_id );
		$criteria->compare ( 'type_id', $this->type_id );
		$criteria->compare ( 'last_visit_time', $this->last_visit_time, true );
		$criteria->compare ( 'last_action_time', $this->last_action_time, true );
		$criteria->compare ( 'last_password_change', $this->last_password_change, true );
		$criteria->compare ( 'activation_key', $this->activation_key, true );
		$criteria->compare ( 'login_error_count', $this->login_error_count );
		$criteria->compare ( 'create_time', $this->create_time, true );
		return new CActiveDataProvider ( $this, array (
				'criteria' => $criteria,
				'pagination' => array (
						'pagesize' => 20 
				) 
		) );
	}
}