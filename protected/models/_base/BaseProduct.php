<?php

/**
 * Company: ToXSL Technologies Pvt. Ltd. < www.toxsl.com >
 * Author : Shiv Charan Panjeta < shiv@toxsl.com >
 */

/**
 * This is the model base class for the table "{{product}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Product".
 *
 * Columns in table "{{product}}" available as properties of the model,
 * followed by relations of table "{{product}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $sku
 * @property string $description
 * @property string $large_description
 * @property string $tags
 * @property string $related_items
 * @property string $thumbnail_file
 * @property string $image_file
 * @property integer $category_id
 * @property string $size_id
 * @property string $color_id
 * @property string $quantity
 * @property string $discount_price
 * @property string $price
 * @property string $discount
 * @property string $tax
 * @property string $tax_amount
 * @property integer $type_id
 * @property integer $state_id
 * @property integer $create_user_id
 * @property string $create_time
 * @property string $update_time
 *
 * @property AddCart[] $addCarts
 */
abstract class BaseProduct extends ActiveRecord {
	public $csv;
	public $price_id;
	public $discount_id;
	public $sort_id;
	public $sort_order_id;
	const SALE_ON = 1;
	const SALE_OFF = 2;
	const DISCOUNT_10 = 10;
	const DISCOUNT_20 = 20;
	const DISCOUNT_50 = 50;
	const TYPE_SIMPLE = 0;
	const TYPE_VARIENT = 1;
	public static function getTypeOptions($id = null) {
		$list = array (
				"Simple",
				"Varient"
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public static function getDiscountOptions($id = null) {
		$list = array (
				self::DISCOUNT_10 => "above 50 disount 10%",
				self::DISCOUNT_20 => "above 200 disount 20%",
				self::DISCOUNT_50 => "above 500 discount 50%" 
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public static function getStatusOptions($id = null) {
		$list = array (
				"UnPublished",
				"Published" 
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public static function getSale($id = null) {
		$list = array (
				self::SALE_OFF => 'New',
				self::SALE_ON => 'Sale' 
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public static function getFeatureOptions($id = null) {
		$list = array (
				"UnFeatured",
				"Featured" 
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public function beforeValidate() {
		if ($this->isNewRecord) {
			
			if (! isset ( $this->create_user_id ))
				$this->create_user_id = Yii::app ()->user->id;
			if (! isset ( $this->create_time ))
				$this->create_time = new CDbExpression ( 'NOW()' );
			if (! isset ( $this->update_time ))
				$this->update_time = new CDbExpression ( 'NOW()' );
		} else {
			$this->update_time = new CDbExpression ( 'NOW()' );
		}
		return parent::beforeValidate ();
	}
	public static function model($className = __CLASS__) {
		return parent::model ( $className );
	}
	public function tableName() {
		return '{{product}}';
	}
	public static function label($n = 1) {
		return Yii::t ( 'app', 'product|products', $n );
	}
	public static function representingColumn() {
		return 'title';
	}
	
	public function getAverageRating($id) {
		
		$criteria = new CDbCriteria ();
		$criteria->addCondition ( 'product_id = ' . $this->id);
		$getReviews= Rating::model ()->findAll ( $criteria );
		$totalReviews = count ( $getReviews );
		$ratingSum = "";
		$ratingOutOf = 5;
		foreach ( $getReviews as $rating ) {
			$ratingSum = $ratingSum + $rating->rating;
		}
		
		if ($totalReviews !== 0) {
			$avarageRating = ($ratingSum * $ratingOutOf) / $totalReviews / $ratingOutOf;
			// $avarageRating = Round($avarageRating);
		} else {
			$avarageRating = 0;
		}
		
		// $avarageRating = number_format ( ( float ) $avarageRating, 1, '.', '' );
		
		return $avarageRating;
	}
	public function rules() {
		return array (
				array (
						'title,brand_id,category_id,create_time,price,size_id,color_id,quantity',
						
						'required' 
				),
				array (
						'price',
						'type',
						'type' => 'float' 
				),
				array (
						'type_id,sku,quantity,is_featured,state_id,postage_id,warranty_id,hide_public,
						is_sale,feature_site,brand_id,create_user_id,discount_price',
						'numerical',
						'integerOnly' => true 
				),
				array (
						'title,range',
						'length',
						'max' => 256 
				),
				array (
						'sku,edition',
						'length',
						'max' => 64 
				),
				array (
						'min_price,max_price',
						'length',
						'max' => 64 
				),
				
				array (
						'tags',
						'length',
						'max' => 512 
				),
				array (
						'related_items, thumbnail_file, image_file',
						'length',
						'max' => 1024 
				),
				array (
						'category_id,size_id,user,price_id,prod_id,discount_percentage',
						'safe' 
				),
				array (
						'color_id, quantity, discount_price, tax, tax_amount',
						'length',
						'max' => 32 
				),
				array (
						'description,like_items,brand,is_sale,feature_site,brand_id,warranty_id,postage_id,large_description, tags, related_items, thumbnail_file, image_file, size_id, color_id, quantity, discount_price, price, is_discount, tax, tax_amount, type_id, state_id',
						'default',
						'setOnEmpty' => true,
						'value' => null 
				),
				
				
				array (
						'id, title,is_sale,feature_site,brand_id, sku,min_price,max_price, description, large_description, tags, related_items, thumbnail_file, image_file, category_id, size_id, color_id, quantity, discount_price, price, is_discount, tax, tax_amount, type_id, state_id, create_user_id, create_time, update_time',
						'safe',
						'on' => 'search' 
				) 
		);
	}
	public function relations() {
		return array (
				'addCarts' => array (
						self::HAS_MANY,
						'AddCart',
						'product_id' 
				),
				'images' => array (
						self::HAS_MANY,
						'ProductImage',
						'product_id' 
				),
				
				'thumbImage' => array (
						self::HAS_ONE,
						'ProductImage',
						'product_id'
				),
				
				'createUser' => array (
						self::BELONGS_TO,
						'User',
						'create_user_id' 
				), // get related product color if any.
				
				'isoffer' => array (
						self::HAS_ONE,
						'OfferItem',
						'product_id' 
				),
				'isdeal' => array (
						self::HAS_ONE,
						'DealItem',
						'product_id' 
				),
				
				'related' => array (
						self::HAS_MANY,
						'LinkProduct',
						'product_id' 
				), // get related product list.
				'relatedCount' => array (
						self::STAT,
						'LinkProduct',
						'product_id' 
				), // get count of related product list.
				
				'liked' => array (
						self::HAS_MANY,
						'LikeProduct',
						'product_id' 
				), // get liked product list.
				'company' => array (
						self::BELONGS_TO,
						'Company',
						'store_id' 
				), // provide store information.
				'warranty' => array (
						self::BELONGS_TO,
						'Warranty',
						'warranty_id' 
				),
				'category' => array (
						self::BELONGS_TO,
						'Category',
						'category_id' 
				), // get related product category if any.
				'brand' => array (
						self::BELONGS_TO,
						'Brand',
						'brand_id' 
				), // get related product brand if any.
				'color' => array (
						self::BELONGS_TO,
						'Color',
						'color_id' 
				), // get related product color if any.
				'size' => array (
						self::BELONGS_TO,
						'Size',
						'size_id' 
				),
				'getsoldCount' => array (
						self::STAT,
						'CartItem',
						'product_id' 
				), // get count of sold used in admin panel
				'varProducts' => array (
						self::HAS_MANY,
						'VarProduct',
						'product_id' 
				) 
		) //

		;
	}
	public function pivotModels() {
		return array ();
	}
	public function attributeLabels() {
		return array (
				'id' => Yii::t ( 'app', 'ID' ),
				'title' => Yii::t ( 'app', 'title' ),
				'sku' => Yii::t ( 'app', 'sku' ),
				'description' => Yii::t ( 'app', 'description' ),
				'range' => Yii::t ( 'app', 'Range (Internal Category and Brands)' ),
				'edition' => Yii::t ( 'app', 'edition' ),
				'hide_public' => Yii::t ( 'app', 'Hide from public' ),
				'tags' => Yii::t ( 'app', 'tags' ),
				'related_items' => Yii::t ( 'app', 'related items' ),
				'thumbnail_file' => Yii::t ( 'app', 'thumbnail file' ),
				'image_file' => Yii::t ( 'app', 'image file' ),
				'category_id' => Yii::t ( 'app', 'category' ),
				'size_id' => Yii::t ( 'app', 'options' ),
				'color_id' => Yii::t ( 'app', 'product color' ),
				'quantity' => Yii::t ( 'app', 'quantity' ),
				'discount_price' => Yii::t ( 'app', 'discount price' ),
				'price' => Yii::t ( 'app', 'price' ),
				'is_discount' => Yii::t ( 'app', 'discount' ),
				'tax' => Yii::t ( 'app', 'tax' ),
				'tax_amount' => Yii::t ( 'app', 'tax amount' ),
				'type_id' => Yii::t ( 'app', 'type' ),
				'state_id' => Yii::t ( 'app', 'state' ),
				'create_user_id' => Yii::t ( 'app', 'create user' ),
				'create_time' => Yii::t ( 'app', 'create time' ),
				'update_time' => Yii::t ( 'app', 'update time' ),
				'csv' => Yii::t ( 'app', 'csv file' ),
				'is_sale' => Yii::t ( 'app', 'sale state' ),
				'is_featured' => Yii::t ( 'app', 'Home Feature' ),
				'feature_site' => Yii::t ( 'app', 'Site Feature' ),
				'brand_id' => Yii::t ( 'app', 'brand' ),
				'like_items' => Yii::t ( 'app', ' "you may also like " items' ),
				'brand' => Yii::t ( 'app', ' "add new brand' ),
				'warranty_id' => Yii::t ( 'app', 'select warranty' ),
				
				'addCarts' => null 
		);
	}
	/**
	 * Enter description here ...
	 * this action is used in admin dashboard
	 */
	public function returnsearch() {
		$criteria = new CDbCriteria ();
		$criteria->addCondition ( 'create_user_id =' . Yii::app ()->user->id );
		$criteria->addCondition ( 'state_id = ' . Payment::STATUS_CANCEL );
		$criteria->compare ( 'p.id', $this->id );
		$criteria->compare ( 'p.title', $this->title, true );
		return new CActiveDataProvider ( $this, array (
				'criteria' => $criteria 
		)
		// 'countCriteria' => array(),
		// 'pagination'=>array('pageSize'=>10)
		 );
	}
	public function search() {
		$criteria = new CDbCriteria ();
		$criteria->alias = 'p';
		//$criteria->compare ( 'p.id', $this->id );
		$criteria->compare ( 'p.title', $this->title, true );
		$criteria->compare ( 'p.sku', $this->sku, true );
		$criteria->compare ( 'p.description', $this->description, true );
		$criteria->compare ( 'p.tags', $this->tags, true );
		$criteria->compare ( 'p.related_items', $this->related_items, true );
		$criteria->compare ( 'p.category_id', $this->category_id );
		$criteria->compare ( 'p.size_id', $this->size_id, true );
		$criteria->compare ( 'p.color_id', $this->color_id, true );
		$criteria->compare ( 'p.quantity', $this->quantity, true );
		$criteria->compare ( 'p.view_count', $this->view_count, true );
		$criteria->compare ( 'p.discount_price', $this->discount_price, true );
		$criteria->compare ( 'p.price', $this->price, true );
		$criteria->compare ( 'p.type_id', $this->type_id );
		$criteria->compare ( 'p.state_id', $this->state_id );
		$criteria->compare ( 'p.is_featured', $this->is_featured );
		$criteria->compare ( 'p.brand_id', $this->brand_id );
		$criteria->compare ( 'p.feature_site', $this->feature_site );
		// $criteria->compare('p.is_sale', $this->is_sale);
		// $criteria->compare('p.is_sale', $this->is_sale);
		if ($this->is_sale == Product::SALE_ON) {
			$product_list = $this->getSalePrductlist ();
			$criteria->addInCondition ( 'p.id', $product_list, 'AND' );
		} else if ($this->is_sale == Product::SALE_OFF) {
			$product_list = $this->getSalePrductlist ();
			$criteria->addNotInCondition ( 'p.id', $product_list, 'AND' );
		}
		// 'isoffer' => array(self::HAS_ONE, 'OfferItem', 'product_id'),
		// 'isdeal' => array(self::HAS_ONE, 'DealItem', 'product_id'),
		
		$criteria->compare ( 'p.title', $this->title );
		$criteria->compare ( 'p.create_user_id', $this->create_user_id );
		$criteria->compare ( 'p.create_time', $this->create_time, true );
		$criteria->compare ( 'p.update_time', $this->update_time, true );
		$criteria->join = 'left join tbl_user as u on p.create_user_id = u.id';
		$criteria->addCondition ( 'u.email like "%' . $this->user . '%"' );
		return new CActiveDataProvider ( $this, array (
				'criteria' => $criteria ,
				'pagination'=>array(
						'pagesize'=>20,
				)
		) );
	}
	public function getSalePrductlist() {
		$product_list = array ();
		$offerItems = OfferItem::model ()->findAll ();
		foreach ( $offerItems as $offerItem ) {
			$product_list [] = $offerItem->product_id;
		}
		$dealItems = DealItem::model ()->findAll ();
		foreach ( $dealItems as $dealItem ) {
			$product_list [] = $dealItem->product_id;
		}
		return $product_list;
	}
	public function invsearch() {
		$criteria = new CDbCriteria ();
		
		// $criteria->compare('id', $this->id);
		
		if (! empty ( $this->title )) {
			if ($this->type_id == 0)
				$criteria->compare ( 'title', $this->title, true, ' OR ' );
			else
				$criteria->compare ( 'description', $this->title, true, ' OR ' );
		}
		
		// if(!empty($this->discount_id))
		$criteria->compare ( 'discount_id', $this->discount_id, true, ' OR ' );
		
		// if(!empty($this->state_id))
		$criteria->compare ( 'state_id', $this->state_id, ' OR ' );
		
		// $criteria->compare('create_user_id', $this->create_user_id);
		$records = Product::model ()->findAll ( $criteria );
		return $records;
	}
	public function offersearch() {
		$criteria = new CDbCriteria ();
		
		// $criteria->compare('id', $this->id);
		$criteria->compare ( 'title', $this->title, true );
		$criteria->compare ( 'description', $this->title, true );
		// $criteria->compare('price', $this->price, true);
		/*
		 * $criteria->compare('discount_id', $this->discount_id, true);
		 * $criteria->compare('state_id', $this->state_id);
		 * $criteria->compare('create_user_id', $this->create_user_id);
		 */
		$records = Product::model ()->my ()->findAll ( $criteria );
		
		return $records;
	}
	public function advSearchApi() {
		$criteria = new CDbCriteria ();
		
		$criteria->compare ( 'title', $this->title, true, ' OR ' );
		
		$criteria->compare ( 'description', $this->title, true, ' OR ' );
		
		if (! empty ( $this->brand_id ))
			$criteria->compare ( 'brand_id', $this->brand_id, true, ' OR ' );
		
		if (! empty ( $this->category_id ))
			$criteria->compare ( 'category_id', $this->category_id, ' OR ' );
		
		if (! empty ( $this->color_id ))
			$criteria->compare ( 'color_id', $this->color_id, ' OR ' );
		
		if (! empty ( $this->store_id ))
			$criteria->compare ( 'store_id', $this->store_id, ' OR ' );
		
		if (! empty ( $this->tags ))
			$criteria->compare ( 'tags', $this->tags, ' OR ' );
		
		if (! empty ( $this->min_price ) && ! empty ( $this->max_price ))
			$criteria->addBetweenCondition ( 'price', $this->min_price, $this->max_price );
		
		$records = Product::model ()->findAll ( $criteria );
		return $records;
	}
}