<?php

/**
 * Company: ToXSL Technologies Pvt. Ltd. < www.toxsl.com >
 * Author : Shiv Charan Panjeta < shiv@toxsl.com >
 */

/**
 * This is the model base class for the table "{{cart}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Cart".
 *
 * Columns in table "{{cart}}" available as properties of the model,
 * followed by relations of table "{{cart}}" available as properties of the model.
 *
 * @property integer $id
 * @property integer $shop_id
 * @property string $device_id
 * @property string $ip_address
 * @property string $session_id
 * @property integer $state_id
 * @property integer $type_id
 * @property double $amount
 * @property integer $postage_id
 * @property double $postage_charge
 * @property integer $coupon_id
 * @property integer $coupon_amount
 * @property integer $create_user_id
 * @property string $create_time
 * @property string $update_time
 *
 * @property Company $shop
 */
abstract class BaseCart extends ActiveRecord {
 
	public static function getStatusOptions($id = null)
	{
		$list = array("Draft","Published","Archive");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}
	public static function getTypeOptions($id = null)
	{
		$list = array("TYPE1","TYPE2","TYPE3");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}
	public function beforeValidate()
	{
		if($this->isNewRecord)
		{
			if ( !isset( $this->create_time )) $this->create_time = new CDbExpression('NOW()');
			if ( !isset( $this->create_user_id )) $this->create_user_id = Yii::app()->user->id;
		}else{
		}
		return parent::beforeValidate();
	}

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{cart}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Cart|Carts', $n);
	}

	public static function representingColumn() {
		return 'create_time';
	}

	public function rules() {
		return array(
		array('create_time', 'required'),
	//	array('shop_id, state_id, type_id, postage_id, coupon_id, create_user_id', 'numerical', 'integerOnly'=>true),
	//	array('amount,coupon_amount, postage_charge', 'numerical'),
	//	array('device_id, session_id', 'length', 'max'=>128),
	//	array('ip_address', 'length', 'max'=>64),
	//	array('update_time', 'safe'),
	//	array('device_id, ip_address, session_id, state_id, type_id, amount, postage_id, postage_charge, coupon_id, coupon_amount, create_user_id, update_time', 'default', 'setOnEmpty' => true, 'value' => null),
	//	array('id, shop_id, device_id, ip_address, session_id, state_id, type_id, amount, postage_id, postage_charge, coupon_id, coupon_amount, create_user_id, create_time, update_time', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
				'createUser' => array(self::BELONGS_TO, 'User', 'create_user_id'),
				'shop' => array(self::BELONGS_TO, 'Company', 'shop_id'),
				'cartItems' => array(self::HAS_MANY, 'CartItem', 'cart_id'),
				'itemCounts' => array(self::STAT, 'CartItem', 'cart_id'),
				'payment' => array(self::HAS_ONE, 'Payment', 'cart_id'),

		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
				'id' => Yii::t('app', 'ID'),
				'shop_id' => null,
				'device_id' => Yii::t('app', 'device'),
				'ip_address' => Yii::t('app', 'ip address'),
				'session_id' => Yii::t('app', 'session'),
				'state_id' => Yii::t('app', 'state'),
				'type_id' => Yii::t('app', 'type'),
				'amount' => Yii::t('app', 'amout'),
				'postage_id' => Yii::t('app', 'postage'),
				'postage_charge' => Yii::t('app', 'postage charge'),
				'coupon_id' => Yii::t('app', 'coupon'),
				'coupon_amount' => Yii::t('app', 'coupon amout'),
				'create_user_id' => Yii::t('app', 'create user'),
				'create_time' => Yii::t('app', 'create time'),
				'update_time' => Yii::t('app', 'update time'),
				'shop' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('shop_id', $this->shop_id);
		$criteria->compare('device_id', $this->device_id, true);
		$criteria->compare('ip_address', $this->ip_address, true);
		$criteria->compare('session_id', $this->session_id, true);
		$criteria->compare('state_id', $this->state_id);
		$criteria->compare('type_id', $this->type_id);
		$criteria->compare('amount', $this->amount);
		$criteria->compare('postage_id', $this->postage_id);
		$criteria->compare('postage_charge', $this->postage_charge);
		$criteria->compare('coupon_id', $this->coupon_id);
		$criteria->compare('coupon_amount', $this->coupon_amount);
		$criteria->compare('create_user_id', $this->create_user_id);
		$criteria->compare('create_time', $this->create_time, true);
		$criteria->compare('update_time', $this->update_time, true);

		return new CActiveDataProvider($this, array(
				'criteria' => $criteria,
		));
	}

}