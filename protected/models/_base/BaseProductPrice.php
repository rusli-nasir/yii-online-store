<?php

/**
 * Company: ToXSL Technologies Pvt. Ltd. < www.toxsl.com >
 * Author : Shiv Charan Panjeta < shiv@toxsl.com >
 */
 
/**
 * This is the model base class for the table "{{product_price}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ProductPrice".
 *
 * Columns in table "{{product_price}}" available as properties of the model,
 * followed by relations of table "{{product_price}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $min_price
 * @property string $max_price
 * @property integer $min_quantity
 * @property integer $max_quantity
 * @property integer $category_id
 * @property integer $state_id
 * @property integer $create_user_id
 * @property string $create_time
 *
 * @property Category $category
 * @property User $createUser
 */
abstract class BaseProductPrice extends ActiveRecord {

	
	public static function getStatusOptions($id = null)
	{
		$list = array("Draft","Published","Archive");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}	

	
	
	
	
	
		public function beforeValidate()
	{
		if($this->isNewRecord)
		{
			if ( !isset( $this->create_user_id )) $this->create_user_id = Yii::app()->user->id;			
		if ( !isset( $this->create_time )) $this->create_time = new CDbExpression('NOW()');
		}else{
				}
		return parent::beforeValidate();
	}

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{product_price}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ProductPrice|ProductPrices', $n);
	}

	public static function representingColumn() {
		return 'min_price';
	}

	public function rules() {
		return array(
			array('min_price,min_quantity,discount, create_user_id', 'required'),
			array('min_quantity, max_quantity, category_id, state_id, create_user_id', 'numerical', 'integerOnly'=>true),
			array('min_price, max_price', 'length', 'max'=>255),
			array('create_time,discount', 'safe'),
			array('state_id, create_time', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, min_price, max_price, min_quantity, max_quantity, category_id, state_id, create_user_id, create_time', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'category' => array(self::BELONGS_TO, 'Category', 'category_id'),
			'createUser' => array(self::BELONGS_TO, 'User', 'create_user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'min_price' => Yii::t('app', 'Min Price'),
			'max_price' => Yii::t('app', 'Max Price'),
			'min_quantity' => Yii::t('app', 'Min Quantity'),
			'max_quantity' => Yii::t('app', 'Max Quantity'),
			'category_id' => null,
			'state_id' => Yii::t('app', 'State'),
			'create_user_id' => null,
			'create_time' => Yii::t('app', 'Create Time'),
			'category' => null,
			'createUser' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;
		$criteria->order = 'id asc';
		$criteria->compare('id', $this->id);
		$criteria->compare('min_price', $this->min_price, true);
		$criteria->compare('max_price', $this->max_price, true);
		$criteria->compare('min_quantity', $this->min_quantity);
		$criteria->compare('max_quantity', $this->max_quantity);
		$criteria->compare('category_id', $this->category_id);
		$criteria->compare('state_id', $this->state_id);
		$criteria->compare('create_user_id', $this->create_user_id);
		$criteria->compare('create_time', $this->create_time, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}