<?php

/**
 * Company: ToXSL Technologies Pvt. Ltd. < www.toxsl.com >
 * Author : Shiv Charan Panjeta < shiv@toxsl.com >
 */

/**
 * This is the model base class for the table "{{variant_product}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "VariantProduct".
 *
 * Columns in table "{{variant_product}}" available as properties of the model,
 * followed by relations of table "{{variant_product}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $sku
 * @property integer $store_id
 * @property string $product_code
 * @property integer $prod_id
 * @property string $range
 * @property string $edition
 * @property integer $hide_public
 * @property string $description
 * @property string $large_description
 * @property string $tags
 * @property string $related_items
 * @property string $thumbnail_file
 * @property string $image_file
 * @property integer $category_id
 * @property string $size_id
 * @property integer $color_id
 * @property integer $brand_id
 * @property integer $is_sale
 * @property integer $feature_site
 * @property integer $is_featured
 * @property integer $postage_id
 * @property integer $view_count
 * @property integer $warranty_id
 * @property string $quantity
 * @property string $discount_price
 * @property double $price
 * @property integer $is_discount
 * @property string $tax
 * @property string $tax_amount
 * @property integer $type_id
 * @property integer $state_id
 * @property integer $create_user_id
 * @property integer $product_id
 * @property integer $rss_id
 * @property string $create_time
 * @property string $update_time
 *
 * @property Category $category
 * @property User $createUser
 * @property Product $product
 */
abstract class BaseVariantProduct extends ActiveRecord {
	public static function getTypeOptions($id = null) {
		$list = array (
				"TYPE1",
				"TYPE2",
				"TYPE3" 
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public static function getStatusOptions($id = null) {
		$list = array (
				"Draft",
				"Published",
				"Archive" 
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public function beforeValidate() {
		if ($this->isNewRecord) {
			if (! isset ( $this->create_user_id ))
				$this->create_user_id = Yii::app ()->user->id;
			if (! isset ( $this->create_time ))
				$this->create_time = new CDbExpression ( 'NOW()' );
		} else {
		}
		return parent::beforeValidate ();
	}
	public static function model($className = __CLASS__) {
		return parent::model ( $className );
	}
	public function tableName() {
		return '{{variant_product}}';
	}
	public static function label($n = 1) {
		return Yii::t ( 'app', 'VariantProduct|VariantProducts', $n );
	}
	public static function representingColumn() {
		return 'title';
	}
	public function rules() {
		return array (
				array (
						'title,category_id,create_time',
						'required' 
				),
				array (
						'store_id, prod_id, hide_public, category_id, color_id, brand_id, is_sale, feature_site, is_featured, postage_id, view_count, warranty_id, is_discount, type_id, state_id, create_user_id, product_id, rss_id',
						'numerical',
						'integerOnly' => true 
				),
				array (
						'price',
						'numerical' 
				),
				array (
						'title, range, edition, large_description',
						'length',
						'max' => 256 
				),
				array (
						'sku',
						'length',
						'max' => 64 
				),
				array (
						'product_code, size_id, quantity, discount_price, tax, tax_amount',
						'length',
						'max' => 32 
				),
				array (
						'tags',
						'length',
						'max' => 512 
				),
				array (
						'related_items, thumbnail_file, image_file',
						'length',
						'max' => 1024 
				),
				array (
						'description,product_id',
						'safe' 
				),
				array (
						'product_code, range, edition, hide_public, description, large_description, tags, related_items, thumbnail_file, image_file, size_id, color_id, brand_id, is_sale, feature_site, postage_id, view_count, warranty_id, quantity, discount_price, is_discount, tax, tax_amount, type_id, state_id',
						'default',
						'setOnEmpty' => true,
						'value' => null 
				),
				array (
						'id, title, sku, store_id, product_code, prod_id, range, edition, hide_public, description, large_description, tags, related_items, thumbnail_file, image_file, category_id, size_id, color_id, brand_id, is_sale, feature_site, is_featured, postage_id, view_count, warranty_id, quantity, discount_price, price, is_discount, tax, tax_amount, type_id, state_id, create_user_id, product_id, rss_id, create_time, update_time',
						'safe',
						'on' => 'search' 
				) 
		);
	}
	public function relations() {
		return array (
				'addCarts' => array (
						self::HAS_MANY,
						'AddCart',
						'product_id' 
				),
				'images' => array (
						self::HAS_MANY,
						'ProductImage',
						'product_id' 
				),
				
				'createUser' => array (
						self::BELONGS_TO,
						'User',
						'create_user_id' 
				), // get related product color if any.
				
				'isoffer' => array (
						self::HAS_ONE,
						'OfferItem',
						'product_id' 
				),
				'isdeal' => array (
						self::HAS_ONE,
						'DealItem',
						'product_id' 
				),
				
				'related' => array (
						self::HAS_MANY,
						'LinkProduct',
						'product_id' 
				), // get related product list.
				'relatedCount' => array (
						self::STAT,
						'LinkProduct',
						'product_id' 
				), // get count of related product list.
				
				'liked' => array (
						self::HAS_MANY,
						'LikeProduct',
						'product_id' 
				), // get liked product list.
				'company' => array (
						self::BELONGS_TO,
						'Company',
						'store_id' 
				), // provide store information.
				'warranty' => array (
						self::BELONGS_TO,
						'Warranty',
						'warranty_id' 
				),
				'category' => array (
						self::BELONGS_TO,
						'Category',
						'category_id' 
				), // get related product category if any.
				'brand' => array (
						self::BELONGS_TO,
						'Brand',
						'brand_id' 
				), // get related product brand if any.
				'color' => array (
						self::BELONGS_TO,
						'Color',
						'color_id' 
				), // get related product color if any.
				'size' => array (
						self::BELONGS_TO,
						'Size',
						'size_id' 
				),
				'getsoldCount' => array (
						self::STAT,
						'CartItem',
						'product_id' 
				), // get count of sold used in admin panel
				'varProducts' => array (
						self::HAS_MANY,
						'VarProduct',
						'product_id' 
				)  //
		
		);
	}
	public function pivotModels() {
		return array ();
	}
	public function attributeLabels() {
		return array (
				'id' => Yii::t ( 'app', 'ID' ),
				'title' => Yii::t ( 'app', 'Title' ),
				'sku' => Yii::t ( 'app', 'Sku' ),
				'store_id' => Yii::t ( 'app', 'Store' ),
				'product_code' => Yii::t ( 'app', 'Product Code' ),
				'prod_id' => Yii::t ( 'app', 'Prod' ),
				'range' => Yii::t ( 'app', 'Range' ),
				'edition' => Yii::t ( 'app', 'Edition' ),
				'hide_public' => Yii::t ( 'app', 'Hide Public' ),
				'description' => Yii::t ( 'app', 'Description' ),
				'large_description' => Yii::t ( 'app', 'Large Description' ),
				'tags' => Yii::t ( 'app', 'Tags' ),
				'related_items' => Yii::t ( 'app', 'Related Items' ),
				'thumbnail_file' => Yii::t ( 'app', 'Thumbnail File' ),
				'image_file' => Yii::t ( 'app', 'Image File' ),
				'category_id' => null,
				'size_id' => Yii::t ( 'app', 'Size' ),
				'color_id' => Yii::t ( 'app', 'Color' ),
				'brand_id' => Yii::t ( 'app', 'Brand' ),
				'is_sale' => Yii::t ( 'app', 'Is Sale' ),
				'feature_site' => Yii::t ( 'app', 'Feature Site' ),
				'is_featured' => Yii::t ( 'app', 'Is Featured' ),
				'postage_id' => Yii::t ( 'app', 'Postage' ),
				'view_count' => Yii::t ( 'app', 'View Count' ),
				'warranty_id' => Yii::t ( 'app', 'Warranty' ),
				'quantity' => Yii::t ( 'app', 'Quantity' ),
				'discount_price' => Yii::t ( 'app', 'Discount Price' ),
				'price' => Yii::t ( 'app', 'Price' ),
				'is_discount' => Yii::t ( 'app', 'Is Discount' ),
				'tax' => Yii::t ( 'app', 'Tax' ),
				'tax_amount' => Yii::t ( 'app', 'Tax Amount' ),
				'type_id' => Yii::t ( 'app', 'Type' ),
				'state_id' => Yii::t ( 'app', 'State' ),
				'create_user_id' => null,
				'product_id' => null,
				'rss_id' => Yii::t ( 'app', 'Rss' ),
				'create_time' => Yii::t ( 'app', 'Create Time' ),
				'update_time' => Yii::t ( 'app', 'Update Time' ),
				'category' => null,
				'createUser' => null,
				'product' => null 
		);
	}
	public function search() {
		$criteria = new CDbCriteria ();
		
		$criteria->compare ( 'id', $this->id );
		$criteria->compare ( 'title', $this->title, true );
		$criteria->compare ( 'sku', $this->sku, true );
		$criteria->compare ( 'store_id', $this->store_id );
		$criteria->compare ( 'product_code', $this->product_code, true );
		$criteria->compare ( 'prod_id', $this->prod_id );
		$criteria->compare ( 'range', $this->range, true );
		$criteria->compare ( 'edition', $this->edition, true );
		$criteria->compare ( 'hide_public', $this->hide_public );
		$criteria->compare ( 'description', $this->description, true );
		$criteria->compare ( 'large_description', $this->large_description, true );
		$criteria->compare ( 'tags', $this->tags, true );
		$criteria->compare ( 'related_items', $this->related_items, true );
		$criteria->compare ( 'thumbnail_file', $this->thumbnail_file, true );
		$criteria->compare ( 'image_file', $this->image_file, true );
		$criteria->compare ( 'category_id', $this->category_id );
		$criteria->compare ( 'size_id', $this->size_id, true );
		$criteria->compare ( 'color_id', $this->color_id );
		$criteria->compare ( 'brand_id', $this->brand_id );
		$criteria->compare ( 'is_sale', $this->is_sale );
		$criteria->compare ( 'feature_site', $this->feature_site );
		$criteria->compare ( 'is_featured', $this->is_featured );
		$criteria->compare ( 'postage_id', $this->postage_id );
		$criteria->compare ( 'view_count', $this->view_count );
		$criteria->compare ( 'warranty_id', $this->warranty_id );
		$criteria->compare ( 'quantity', $this->quantity, true );
		$criteria->compare ( 'discount_price', $this->discount_price, true );
		$criteria->compare ( 'price', $this->price );
		$criteria->compare ( 'is_discount', $this->is_discount );
		$criteria->compare ( 'tax', $this->tax, true );
		$criteria->compare ( 'tax_amount', $this->tax_amount, true );
		$criteria->compare ( 'type_id', $this->type_id );
		$criteria->compare ( 'state_id', $this->state_id );
		$criteria->compare ( 'create_user_id', $this->create_user_id );
		$criteria->compare ( 'product_id', $this->product_id );
		$criteria->compare ( 'rss_id', $this->rss_id );
		$criteria->compare ( 'create_time', $this->create_time, true );
		$criteria->compare ( 'update_time', $this->update_time, true );
		
		return new CActiveDataProvider ( $this, array (
				'criteria' => $criteria 
		) );
	}
}