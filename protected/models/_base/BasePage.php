<?php

/**
 * Company: ToXSL Technologies Pvt. Ltd. < www.toxsl.com >
 * Author : Shiv Charan Panjeta < shiv@toxsl.com >
 */

/**
 * This is the model base class for the table "{{page}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Page".
 *
 * Columns in table "{{page}}" available as properties of the model,
 * followed by relations of table "{{page}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $url
 * @property string $content
 * @property integer $type_id
 * @property integer $state_id
 * @property integer $view_count
 * @property string $create_time
 * @property string $update_time
 * @property integer $create_user_id
 *
 * @property User $createUser
 */
abstract class BasePage extends ActiveRecord {
	const TYPE_ABOUT_US = 0;
	const TYPE_TERMS_AND_CONDITIONS = 1;
	const TYPE_PRIVACY_POLICY = 2;
	const TYPE_RETURN_CANCELLATION = 3;
	const TYPE_SHIPPING = 4;
	const TYPE_FAQ = 5;
	const LANG_EN = 'en';
	const LANG_PT = 'pt';
	public static function getLangOptions($id = null) {
		$list = array (
				self::LANG_EN => "English",
				self::LANG_PT => "portugeese" 
		
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public static function getTypeOptions($id = null) {
		$list = array (
				self::TYPE_ABOUT_US => "About Us",
				self::TYPE_TERMS_AND_CONDITIONS => "Terms & Conditions",
				self::TYPE_PRIVACY_POLICY => "Privacy Policy",
				self::TYPE_RETURN_CANCELLATION => "Return & Cancellation Policy",
				self::TYPE_SHIPPING => "Shipping Policy",
				self::TYPE_FAQ => "FAQs" 
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public static function getTypeValues() {
		$list = array (
				'type' => self::TYPE_ABOUT_US,
				'type' => self::TYPE_TERMS_AND_CONDITIONS,
				'type' => self::TYPE_PRIVACY_POLICY,
				'type' => self::TYPE_RETURN_CANCELLATION,
				'type' => self::TYPE_SHIPPING,
				'type' => self::TYPE_FAQ 
		
		);
		
		return $list;
	}
	public static function getStatusOptions($id = null) {
		$list = array (
				"Draft",
				"Published",
				"Archive" 
		);
		if ($id == null)
			return $list;
		if (is_numeric ( $id ))
			return $list [$id];
		return $id;
	}
	public function beforeValidate() {
		if ($this->isNewRecord) {
			if (! isset ( $this->create_time ))
				$this->create_time = new CDbExpression ( 'NOW()' );
			if (! isset ( $this->create_user_id ))
				$this->create_user_id = Yii::app ()->user->id;
			if (! isset ( $this->update_time ))
				$this->update_time = new CDbExpression ( 'NOW()' );
		} else {
			$this->update_time = new CDbExpression ( 'NOW()' );
		}
		return parent::beforeValidate ();
	}
	public static function model($className = __CLASS__) {
		return parent::model ( $className );
	}
	public function tableName() {
		return '{{page}}';
	}
	public static function label($n = 1) {
		return Yii::t ( 'app', 'Page|Pages', $n );
	}
	public static function representingColumn() {
		return 'title';
	}
	public function rules() {
		return array (
				array (
						'content, type_id,title, create_user_id,lang_type',
						'required' 
				),
				array (
						'type_id, state_id, view_count, create_user_id',
						'numerical',
						'integerOnly' => true 
				),
				/* array (
				 'type_id',
				 'unique',
				 ), */
				array (
						'title, url',
						'length',
						'max' => 128 
				),
				array (
						'create_time, update_time,user',
						'safe' 
				),
				array (
						'title, url, view_count, create_time, update_time',
						'default',
						'setOnEmpty' => true,
						'value' => null 
				),
				array (
						'id, title, url, content, type_id, state_id, view_count, create_time, update_time, create_user_id',
						'safe',
						'on' => 'search' 
				),
				
				/* array (
						'type_id',
						'checkType',
						'type' => $this->getTypeValues () 
				)  */
		
		);
	}
	public function relations() {
		return array (
				'createUser' => array (
						self::BELONGS_TO,
						'User',
						'create_user_id' 
				) 
		);
	}
	public function checkType($attribute, $params) {
		
		// $this->addError($attribute, $params);
		foreach ( $params as $data ) {
			foreach ( $data as $d ) {
				$getModel = Page::findall ();
				
				foreach ( $getModel as $page ) {
					if ($page->type_id == $this->$attribute && $page->type_id == self::TYPE_ABOUT_US) {
						$this->addError ( $attribute, "About Us Already Taken" );
					}
					
					if ($page->type_id == $this->$attribute && $page->type_id == self::TYPE_TERMS_AND_CONDITIONS) {
						$this->addError ( $attribute, "Terms And Conditions Already Taken" );
					}
					if ($page->type_id == $this->$attribute && $page->type_id == self::TYPE_PRIVACY_POLICY) {
						$this->addError ( $attribute, "Privacy Policy Already Taken" );
					}
					if ($page->type_id == $this->$attribute && $page->type_id == self::TYPE_RETURN_CANCELLATION) {
						$this->addError ( $attribute, "Return & Cancellation Policy Already Taken" );
					}
					if ($page->type_id == $this->$attribute && $page->type_id == self::TYPE_SHIPPING) {
						$this->addError ( $attribute, "Shipping Policy Already Taken" );
					}
				}
			}
		}
	}
	public function pivotModels() {
		return array ();
	}
	public function attributeLabels() {
		return array (
				'id' => Yii::t ( 'app', 'ID' ),
				'title' => Yii::t ( 'app', 'title' ),
				'url' => Yii::t ( 'app', 'url' ),
				'content' => Yii::t ( 'app', 'content' ),
				'type_id' => Yii::t ( 'app', 'type' ),
				'state_id' => Yii::t ( 'app', 'state' ),
				'view_count' => Yii::t ( 'app', 'view count' ),
				'create_time' => Yii::t ( 'app', 'create time' ),
				'update_time' => Yii::t ( 'app', 'update time' ),
				'create_user_id' => null,
				'createUser' => null 
		);
	}
	public function search() {
		$criteria = new CDbCriteria ();
		$criteria->alias = 'p';
		$criteria->compare ( 'p.id', $this->id );
		$criteria->compare ( 'p.title', $this->title, true );
		$criteria->compare ( 'p.url', $this->url, true );
		$criteria->compare ( 'p.content', $this->content, true );
		$criteria->compare ( 'p.type_id', $this->type_id );
		$criteria->compare ( 'p.state_id', $this->state_id );
		$criteria->compare ( 'p.view_count', $this->view_count );
		$criteria->compare ( 'p.create_time', $this->create_time, true );
		$criteria->compare ( 'p.update_time', $this->update_time, true );
		$criteria->compare ( 'p.create_user_id', $this->create_user_id );
		$criteria->join = 'left join tbl_user as u on p.create_user_id = u.id';
		$criteria->addCondition ( 'u.email like "%' . $this->user . '%"' );
		return new CActiveDataProvider ( $this, array (
				'criteria' => $criteria,
				'countCriteria' => array (),
				'pagination' => array (
						'pageSize' => 10 
				) 
		) );
	}
}